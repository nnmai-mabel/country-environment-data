@model Assig1.ViewModels.CitiesViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="text-center">

    @*Show city, country, and region name if applicable*@
    @if (Model.TheCityDetail != null)
    {
        <h1>@Model.TheCityDetail?.TheCity?.CityName's Air Quality Data</h1>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            City name not available.
        </div>
    }
    @if (Model.TheCityDetail != null)
    {
        <h3>@Model.TheCityDetail?.TheCountry?.CountryName</h3>
    }
    else
    {
        <h3>Country: Not available</h3>
    }
    @if (Model.TheCityDetail != null)
    {
        <h5>@Model.TheCityDetail?.TheRegion?.RegionName</h5>
    }
    else
    {
        <h5>Region: Not available</h5>
    }
</div>

<div class="row justify-content-center" id="AirAlert" align="center" role="alert">
    @*This is space for an alert*@
</div>

@*Go back button*@
<a asp-action="Index" asp-route-regionId="@Model.RegionId" asp-route-countryId="@Model.TheCityDetail?.TheCity?.CountryId" asp-route-searchText="@Model.SearchText" class="btn btn-success">Go back</a>

@*Allow user to choose data to display on the graph*@
<div id="AirData">
    <div class="row mb-3 mt-3" id="dataDisplay">
        <div class="col-2" id="chartLegend">
            <select asp-for="@Model.ChartLegend" class="form-control" id="chartLegend">
                <option value="">Select Data</option>
                <option value="PM10">Annual Mean PM10</option>
                <option value="PM2.5">Annual Mean PM2.5</option>
            </select>
        </div>
    </div>

    <div>
        <svg width="100%" height="600px" class="border border-primary rounded p-2"></svg>
    </div>

    @*Alert info to instruct user to choose data to display on the graph*@
    <div class="alert alert-info mt-3" role="alert" id="tips">
        ℹ︎ Choose either PM10 or PM2.5 to show annual mean data.
    </div>

    @*Show accordion for summary and all data set*@
    <div class="accordion mt-3" id="accordionExample">

        @*Accordion for summary*@
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    View air quality data summary of the country
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body" id="AirSummary">
                    @*Space for summary data*@
                    <div id="AirInfo" class="text-center">
                        <table class="table table-warning" id="AirTable">
                            <thead>
                                <tr>
                                    <th>Measurements</th>
                                    <th>Min Annual Mean</th>
                                    <th>Max Annual Mean</th>
                                    <th>Average Annual Mean</th>
                                </tr>
                            </thead>

                            @*Show test data row*@
                            <tbody id="AirSummaryInfo">
                                @*Data goes here*@
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        @*Accordion for all data set*@
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    View all air quality data
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div id="ItemElementInfo">
                        <table class="table table-info">
                            <thead>
                                <tr>
                                    <th>Year</th>
                                    <th>Annual Mean PM10</th>
                                    <th>Annual Mean</th>
                                    <th>Annual Mean PM2.5</th>
                                    <th>Annual Mean Ugm3</th>
                                    <th>Temporal Coverage 1</th>
                                    <th>Temporal Coverage 2</th>
                                    <th>Station Type</th>
                                    <th>Number of Stations</th>
                                    <th>Database Year</th>
                                    <th>Status</th>
                                    <th>Reference</th>
                                </tr>
                            </thead>

                            @*Show test data row*@
                            <tbody class="AirQualityInfo">
                                <tr class="rowData">
                                    <td>year test</td>
                                    <td>annualMeanPm10 test</td>
                                    <td>annualMean test</td>
                                    <td>annualMeanPm25 test</td>
                                    <td>annualMeanUgm3 test</td>
                                    <td>temporalCoverage1 test</td>
                                    <td>temporalCoverage2 test</td>
                                    <td>stationType test</td>
                                    <td>number test</td>
                                    <td>dbYear test</td>
                                    <td>status test</td>
                                    <td>reference test</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        // Fetch complete data set
        fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}`)
            .then(response => {
                return response.json();
            })
            .then(data => buildAirQualityTable(data))
            .catch(err => console.log(err.message));

        // Fetch summary data
        fetch(`/Cities/AirSummaryData?countryId=${@Model.CountryId}&cityId=${@Model.CityId}`)
            .then(response => {
                return response.json();
            })
            .then(data => buildAirSummary(data))
            .catch(err => console.log(err.message));

        // Build summary in a bootstrap card
        function buildAirSummary(dataSet) {

            var tableBody = document.querySelector("#AirSummaryInfo");

            // Only need dataSet[0] because only have 1 row of
            // total, average, min, max of all emissions in each country
            // Create element and attach value

            var Pm10Row = document.createElement("tr");
            var Pm10Element = document.createElement("td");
            var Pm10Message = `PM10`;
            var Pm10TextNode = document.createTextNode(Pm10Message);
            Pm10Element.appendChild(Pm10TextNode);

            var minPm10Element = document.createElement("td");
            var minPm10Message = `${dataSet[0].minValuePm10}`;
            var minPm10TextNode = document.createTextNode(minPm10Message);
            minPm10Element.appendChild(minPm10TextNode);

            var maxPm10Element = document.createElement("td");
            var maxPm10Message = `${dataSet[0].maxValuePm10}`;
            var maxPm10TextNode = document.createTextNode(maxPm10Message);
            maxPm10Element.appendChild(maxPm10TextNode);

            var averagePm10Element = document.createElement("td");
            var averagePm10Message = `${dataSet[0].averageValuePm10}`;
            var averagePm10TextNode = document.createTextNode(averagePm10Message);
            averagePm10Element.appendChild(averagePm10TextNode);

            Pm10Row.appendChild(Pm10Element);
            Pm10Row.appendChild(minPm10Element);
            Pm10Row.appendChild(maxPm10Element);
            Pm10Row.appendChild(averagePm10Element);
            tableBody.appendChild(Pm10Row);

            var Pm25Row = document.createElement("tr");
            var Pm25Element = document.createElement("td");
            var Pm25Message = `PM2.5`;
            var Pm25TextNode = document.createTextNode(Pm25Message);
            Pm25Element.appendChild(Pm25TextNode);

            var minPm25Element = document.createElement("td");
            var minPm25Message = `${dataSet[0].minValuePm25}`;
            var minPm25TextNode = document.createTextNode(minPm25Message);
            minPm25Element.appendChild(minPm25TextNode);

            var maxPm25Element = document.createElement("td");
            var maxPm25Message = `${dataSet[0].maxValuePm25}`;
            var maxPm25TextNode = document.createTextNode(maxPm25Message);
            maxPm25Element.appendChild(maxPm25TextNode);

            var averagePm25Element = document.createElement("td");
            var averagePm25Message = `${dataSet[0].averageValuePm25}`;
            var averagePm25TextNode = document.createTextNode(averagePm25Message);
            averagePm25Element.appendChild(averagePm25TextNode);

            Pm25Row.appendChild(Pm25Element);
            Pm25Row.appendChild(minPm25Element);
            Pm25Row.appendChild(maxPm25Element);
            Pm25Row.appendChild(averagePm25Element);
            tableBody.appendChild(Pm25Row);
        }

        // Build table for complete data set
        function buildAirQualityTable(dataSet) {

            var table = document.querySelector(".AirQualityInfo")
            if (dataSet.length > 0) {
                for (let i = 0; i < dataSet.length; i++) {
                    var row = table.querySelector("tr.rowData").cloneNode(true);

                    let tdList = row.querySelectorAll('td');
                    tdList[0].innerText = dataSet[i].year;
                    tdList[1].innerText = dataSet[i].annualMeanPm10;
                    tdList[2].innerText = dataSet[i].annualMean;
                    tdList[3].innerText = dataSet[i].annualMeanPm25;
                    tdList[4].innerText = dataSet[i].annualMeanUgm3;
                    tdList[5].innerText = dataSet[i].temporalCoverage1;
                    tdList[6].innerText = dataSet[i].temporalCoverage2;
                    tdList[7].innerText = dataSet[i].stationType;
                    tdList[8].innerText = dataSet[i].number;
                    tdList[9].innerText = dataSet[i].dbYear;
                    tdList[10].innerText = dataSet[i].status;
                    tdList[11].innerText = dataSet[i].reference;

                    table.appendChild(row);

                    if (i == (dataSet.length - 1)) {
                        table.removeChild(table.querySelector("tr.rowData"))
                    }
                }
            }
            else { // If there is no data, hide the data elements and show alert
                var alertContainer = document.querySelector("#AirAlert");

                var alertElement = document.createElement("div");
                alertElement.className = "alert alert-warning";
                alertElement.setAttribute("role", "alert");

                var message = "There is no emission data in this country.";
                var textNode = document.createTextNode(message);
                alertElement.appendChild(textNode);
                alertContainer.appendChild(alertElement);

                var airData = document.getElementById("AirData");
                airData.classList.add("hideElement");
            }
        }

        // Select SVG element
        const svg = d3.select('svg');

        // Determine the size of the SVG element
        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        // Chart margins
        const chartMargins = {
            left: 100,
            right: 25,
            top: 75,
            bottom: 150
        };

        // Update width and height variable to account for the reduction in size caused by margins
        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        // DDL year event listener
        // Build default legends
        let chart = "";

        // Update the graph everytime user changes an option
        document.querySelector('.row .col-2 #chartLegend').addEventListener('change', legendEvent => {
            chart = legendEvent.target.value;

            alert = document.querySelector("#tips");

            if (chart != null && chart != "") {
                alert.classList.add("hideElement");
                fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}`)
                    .then(response => {
                        return response.json();
                    })
                    .then(data => buildAirQualityGraph(data))
                    .catch(err => console.log(err.message));
            }
            else {
                alert.classList.remove("hideElement");
                d3.selectAll('svg > *').remove();
            }
        })

        function buildAirQualityGraph(dataSet) {

            // Clear graph
            d3.selectAll('svg > *').remove();

            // Calculate the maximum value to be displayed
            let annualMeanRange = "";
            let maxAnnualMean = "";

            if (chart == "PM10") {
                annualMeanRange = d3.extent(dataSet, (d, a) => d.annualMean);
                maxAnnualMean = annualMeanRange[1];
            }
            else {
                annualMeanRange = d3.extent(dataSet, (d, a) => d.annualMeanUgm3);
                maxAnnualMean = annualMeanRange[1];
            }

            // Calculate the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // Create a YScale
            let yScale = d3.scaleLinear()
                .domain([0, maxAnnualMean])
                .range([h, 0]);

            // Create XScale
            let annualMeanArray = Array.from(dataSet, (d, a) => d.year);

            let xScale = d3.scaleBand()
                .domain(annualMeanArray)
                .range([0, w])
                .paddingInner(0.1);

            // Create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // Append the barGroups to the chartGroup
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            // Add new bar groups
            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, e) => {
                    // Implement yScale
                    // Implement xScale
                    if (chart == "PM10") {
                        return `translate(${xScale(d.year)}, ${yScale(d.annualMean)})`;
                    }
                    else {
                        return `translate(${xScale(d.year)}, ${yScale(d.annualMeanUgm3)})`;
                    }
                }); // end transform

            if (chart == "PM10") {
                // Append new rectangles
                // Animate
                newBarGroups
                    .append('rect')
                    .attr('x', 0) // optional line that can be left out since 0 is the default
                    // Implement yScale
                    .attr('height', 0)
                    .attr('y', (d, a) => { return h - yScale(d.annualMean); })
                    // Implement xScale
                    .attr('width', xScale.bandwidth())
                    .style('fill', 'transparent')
                    .transition().duration((d, a) => a * 500) // perform transition over 1 second
                    .delay((d, a) => a + 200)
                    .attr('y', 0)
                    .attr('height', (d, a) => { return h - yScale(d.annualMean); })
                    .style("fill", (d, a) => { return `rgb(246, 190, ${a * 5 + 50})` });

                // Create Bar text
                newBarGroups
                    .append('text')
                    .attr("text-anchor", "middle")
                    .attr('x', (d, a) => { return xScale.bandwidth() / 2; })
                    .attr('y', 20) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar, -10 and fill black make it outside
                    .attr('fill', 'white')
                    .style('font-size', '1em')
                    .text((d, a) => d.annualMean.toLocaleString());
            }
            else {
                // Append new rectangles
                // Animate
                newBarGroups
                    .append('rect')
                    .attr('x', 0) // optional line that can be left out since 0 is the default
                    // Implement yScale
                    .attr('height', 0)
                    .attr('y', (d, a) => { return h - yScale(d.annualMeanUgm3); })
                    // Implement xScale
                    .attr('width', xScale.bandwidth())
                    .style('fill', 'transparent')
                    .transition().duration((d, a) => a * 500) // perform transition over 1 second
                    .delay((d, a) => a + 200)
                    .attr('y', 0)
                    .attr('height', (d, a) => { return h - yScale(d.annualMeanUgm3); })
                    .style("fill", (d, a) => { return `rgb(0, 121, ${a * 10 + 120})` });

                // Create Bar text
                newBarGroups
                    .append('text')
                    .attr("text-anchor", "middle")
                    .attr('x', (d, a) => { return xScale.bandwidth() / 2; })
                    .attr('y', 20) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar, -10 and fill black make it outside
                    .attr('fill', 'white')
                    .style('font-size', '1em')
                    .text((d, a) => d.annualMeanUgm3.toLocaleString());
            }

            // Create the axis and add it to the svg
            // Append the y-Axis to the chartGroup
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // Append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`) // pull the xAxis to the bottm
                .classed('axis x', true)
                .call(xAxis);

            // Style and Rotate the labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(0)")
                .attr("dx", "1em")
                .attr("dy", "1.5em")
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "2em"); // set font size

            // Add chart title
            svg.append('text')
                .attr('x', w / 2)
                .attr('y', chartMargins.top / 2)
                .attr('text-anchor', 'middle')
                .style('font-size', '1.5em')
                .text(`Annual Mean of ${chart} Particles over Years Graph`);

            svg.append('text')
                .attr('x', -chartMargins.left * 3) // Adjust as needed for left-right positioning
                .attr('y', 50) // Increase the value to move the title downward
                .attr('text-anchor', 'middle')
                .style('font-size', '1.5em')
                .attr('transform', 'rotate(-90)')
                .text(`${chart}'s Annual Mean`);
        }
    </script>
}
