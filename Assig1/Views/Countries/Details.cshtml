@model Assig1.ViewModels.CountriesViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="text-center mb-3">
    <h1 class="mb-3">@Model.TheCountryDetail.TheCountry.CountryName's Emissions Data</h1>
    @if (Model.TheCountryDetail.TheRegion != null)
    {
        <h3>Region: @Model.TheCountryDetail.TheRegion.RegionName</h3>
    }
    else
    {
        <h3>Region: Not available</h3>
    }
</div>

<div class="alert alert-danger" role="alert" id="NoData">
    There are no data available for this country.
</div>

<div class="mb-2">

    @if (Model.TheCountryDetail.TheRegion != null)
    {
        <a asp-action="Index" asp-route-countryId="@Model.TheCountryDetail.TheCountry.CountryId" asp-route-regionId="@Model.TheCountryDetail.TheRegion.RegionId" class="btn btn-primary">Countries in Same Region</a>
    }
    else
    {
        <a asp-action="Index" asp-route-countryId="" class="btn btn-primary">All Countries</a>
    }
    <a asp-controller="Cities" asp-action="Index" asp-route-countryId="@Model.TheCountryDetail.TheCountry.CountryId" asp-route-pageSource="countriesDetails" class="btn btn-warning m-3">Visit Cities</a>

</div>

@*Show options to choose to display related graph*@
<div id="AllData">
    <div class="row mb-3" id="dataDisplay">
        <div class="col-2" id="chartLegendElement">
            <select asp-for="@Model.ChartLegend" class="form-control" id="chartLegend">
                <option value="Elements" id="ElementsOption">Elements</option>
                <option value="Items" id="ItemsOption">Items</option>
                <option value="Temperature" id="TemperatureOption">Temperature</option>
            </select>
        </div>

        <div class="col-2" id="chartAggregationElement">
            <select asp-for="@Model.ChartAggregation" class="form-control" id="chartAggregation">
                <option value="Total">Total</option>
                <option value="Average">Average</option>
            </select>
        </div>

        <div class="col-2" id="yearElement">
            <select asp-for="@Model.Year" asp-items="@Model.YearList" class="form-control" id="year">
                <option value="">Select year</option>
            </select>
        </div>
    </div>

    <div>
        <svg width="100%" height="600px" class="border border-primary rounded p-2"></svg>
    </div>

    @*This is the space for the tips alert to show up if user chooses item graph*@
    <div class="alert alert-info hideElement" role="alert" id="tips">
        ⚠︎ Hover on each bar to view detailed data.
    </div>
    <div class="alert alert-warning" role="alert" id="NoEmissions">
        ⚠︎ There are no Emissions data available.
    </div>
    <div class="accordion mt-3" id="accordionExample">
        @*Data Summary accordion item*@
        <div class="accordion-item" id="SummaryData">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" id="CountryImage">
                    View Country Emissions Summary
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    @*This is the space for creating elements and showing data summary*@
                    <div class="card mx-auto" style="max-width: 1000px;">
                        <div class="d-flex align-items-center">
                            <div class="col-md-6">
                                <img src="@Model.TheCountryDetail.TheCountry.ImageUrl" class="img-fluid rounded-start" alt="@Model.TheCountryDetail.TheCountry.CountryName">
                            </div>
                            <div class="col-md-6">
                                <div class="card-body m-3">
                                    <h3 class="card-title mb-3" id="CardHeading">Country Emissions Summary</h3>
                                    <div id="EmissionSummary">
                                        @*This is the space where data elements are created*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*Complete Data table accordion item*@
        <div class="accordion-item" id="EmissionsData">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    View All Items and Elements Data
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div id="ItemElementInfo">

                        @*Table for all data*@
                        <table class="table table-info">
                            <thead>
                                <tr>
                                    <th>Year</th>
                                    <th>Item</th>
                                    <th>Element</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody class="ItemElementInfo">
                                <tr class="rowData">
                                    <td>Year test</td>
                                    <td>Item test</td>
                                    <td>Element test</td>
                                    <td>Value test</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="accordion-item" id="TemperatureData">
            <h2 class="accordion-header" id="headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    View All Temperature Data
                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div id="TemperatureSummary">
                        @*Space for temperature summary data*@
                    </div>

                    @*Space for temperature data*@
                    <div id="TemperatureTable">

                        @*Table for all data*@
                        <table class="table table-success">
                            <thead>
                                <tr>
                                    <th>Year</th>
                                    <th>Value</th>
                                    <th>Unit</th>
                                    <th>Change</th>
                                </tr>
                            </thead>
                            <tbody class="TemperatureTableBody">
                                <tr class="TemperatureRow">
                                    <td>Year test</td>
                                    <td>Value test</td>
                                    <td>Unit test</td>
                                    <td>Change test</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="alert alert-warning" role="alert" id="NoTemperature">
        ⚠︎ There are no Temperature data available.
    </div>
</div>

@section scripts{
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        fetch(`/Countries/ItemElementData?countryId=${@Model.CountryId}`)
            .then(response => {
                return response.json();
            })
            .then(data => buildTableItem(data))
            .catch(err => console.log(err.message));

        fetch(`/Countries/EmissionSummaryData?countryId=${@Model.CountryId}`)
            .then(response => {
                return response.json();
            })
            .then(data => buildEmissionSummary(data))
            .catch(err => console.log(err.message));

        // Fetch temperature summary
        fetch(`/Countries/TemperatureSummary?countryId=${@Model.CountryId}`)
            .then(response => {
                return response.json();
            })
            .then(data => buildTemperatureSummary(data))
            .catch(err => console.log(err.message));

        // Fetch temperature data
        fetch(`/Countries/TemperatureReportData?countryId=${@Model.CountryId}`)
            .then(response => {
                return response.json();
            })
            .then(data => buildTableTemperature(data))
            .catch(err => console.log(err.message));

        let noDataAlert = document.querySelector("#NoData");
        let emissionsAlert = document.querySelector("#NoEmissions");
        let emissionsData = document.querySelector("#EmissionsData");
        let itemsOption = document.querySelector("#ItemsOption");
        let elementsOption = document.querySelector("#ElementsOption");
        let aggregationElement = document.querySelector("#chartAggregationElement");
        let yearElement = document.querySelector("#yearElement");
        let countryImage = document.querySelector("#CountryImage");
        let cardHeading = document.querySelector("#CardHeading");

        let temperatureExistAlert = document.querySelector("#NoTemperature");
        let dataDisplayOptions = document.querySelector("#dataDisplay");

        let allData = document.querySelector("#AllData");

        // Hide data options if there are no emissions and no temperature alert
        if (!emissionsAlert.classList.contains("hideElement") && !temperatureExistAlert.classList.contains("hideElement")) {
            dataDisplayOptions.classList.add("hideElement");
        }

        function buildEmissionSummary(dataSet) {
            if (dataSet.length > 0) {
                let summary = document.querySelector("#EmissionSummary");

                // Only need dataSet[0] because only have 1 row of
                // total, average, min, max of all emissions in each country
                // Build a new element and appendChild to the parent element
                let totalElement = document.createElement("p");
                totalElement.classList.add("card-text");
                const totalMessage = `Total emissions value: ${dataSet[0].totalValue}`;
                const totalTextNode = document.createTextNode(totalMessage);
                totalElement.appendChild(totalTextNode);
                summary.appendChild(totalElement);

                let averageElement = document.createElement("p");
                averageElement.classList.add("card-text");
                const averageMessage = `Average emissions value: ${dataSet[0].averageValue}`;
                const averageTextNode = document.createTextNode(averageMessage);
                averageElement.appendChild(averageTextNode);
                summary.appendChild(averageElement);

                let minElement = document.createElement("p");
                minElement.classList.add("card-text");
                const minMessage = `Min emissions value: ${dataSet[0].minValue}`;
                const minTextNode = document.createTextNode(minMessage);
                minElement.appendChild(minTextNode);
                summary.appendChild(minElement);

                let maxElement = document.createElement("p");
                maxElement.classList.add("card-text");
                const maxMessage = `Max emissions value: ${dataSet[0].maxValue}`;
                const maxTextNode = document.createTextNode(maxMessage);
                maxElement.appendChild(maxTextNode);
                summary.appendChild(maxElement);
            }
        }

        function buildTableItem(dataSet) {

            // Build table if there are available data
            if (dataSet.length > 0) {

                // Hide alert
                noDataAlert.classList.add("hideElement");
                emissionsAlert.classList.add("hideElement");

                // Show data and options
                dataDisplayOptions.classList.remove("hideElement");

                emissionsData.classList.remove("hideElement");
                itemsOption.classList.remove("hideElement");
                elementsOption.classList.remove("hideElement");
                aggregationElement.classList.remove("hideElement");
                yearElement.classList.remove("hideElement");

                let table = document.querySelector(".ItemElementInfo");

                // Declare the previous year and item to clear the same year and item on page
                let previousYear = null;
                let previousItem = null;

                for (let i = 0; i < dataSet.length; i++) {
                    let row = table.querySelector("tr.rowData").cloneNode(true);

                    let tdList = row.querySelectorAll('td');

                    // Track whether the year in next row data is the same,
                    // if so, don't show the year
                    if (dataSet[i].year != previousYear) {
                        tdList[0].innerText = dataSet[i].year;
                        tdList[0].style.borderBottom = "none";
                        tdList[0].style.borderTop = "1px solid";

                    }
                    else {
                        tdList[0].innerText = "";
                        tdList[0].style.borderLeft = "none";
                        tdList[0].style.borderRight = "none";
                        tdList[0].style.borderBottom = "none";
                    }

                    // Track whether the item in next row data is the same,
                    // if so, don't show the item
                    if (dataSet[i].item != previousItem) {
                        tdList[1].innerText = dataSet[i].item;
                        tdList[1].style.borderBottom = "none";
                        tdList[1].style.borderTop = "1px solid";
                        tdList[2].style.borderTop = "1px solid";
                        tdList[3].style.borderTop = "1px solid";
                    }
                    else {
                        tdList[1].innerText = "";
                        tdList[1].style.borderLeft = "none";
                        tdList[1].style.borderRight = "none";
                        tdList[1].style.borderBottom = "none";
                    }

                    // Show the element name and its value
                    tdList[2].innerText = dataSet[i].element;
                    tdList[2].style.borderBottom = "none";
                    tdList[3].innerText = dataSet[i].value;
                    tdList[3].style.borderBottom = "none";

                    // Update the previous year and item
                    previousYear = dataSet[i].year;
                    previousItem = dataSet[i].item;
                    table.appendChild(row);

                    // Remove the template table row
                    if (i == (dataSet.length - 1)) {
                        table.removeChild(table.querySelector("tr.rowData"))
                    }
                }
            }
            else { // If there are no data available, show an alert and hide all the data display elements

                // Show alert
                emissionsAlert.classList.remove("hideElement");

                // Hide data and options
                emissionsData.classList.add("hideElement");
                itemsOption.classList.add("hideElement");
                elementsOption.classList.add("hideElement");
                aggregationElement.classList.add("hideElement");
                yearElement.classList.add("hideElement");

                // Change options data
                elementsOption.innerText = "Select Data";
                elementsOption.value = "";
                elementsOption.classList.add("hideElement");

                // Change accordion title
                countryImage.innerText = "View Country Image";
                cardHeading.innerText = "";
            }
        }

        function buildTemperatureSummary(dataSet) {
            let noDataAlert = document.querySelector("#NoData");

            let temperatureAlert = document.querySelector("#NoTemperature");
            let temperatureData = document.querySelector("#TemperatureData");
            let temperatureOption = document.querySelector("#TemperatureOption");

            if (dataSet.length > 0) {

                // Hide alert
                noDataAlert.classList.add("hideElement");
                temperatureAlert.classList.add("hideElement");

                // Show tempareture data and option
                dataDisplayOptions.classList.remove("hideElement");

                temperatureData.classList.remove("hideElement");
                temperatureOption.classList.remove("hideElement");

                // Create elements to show data
                let summary = document.querySelector("#TemperatureSummary");

                let minElement = document.createElement("p");
                const minMessage = `Min temperature: ${dataSet[0].minValue}`;
                const minTextNode = document.createTextNode(minMessage);
                minElement.appendChild(minTextNode);
                summary.appendChild(minElement);

                let maxElement = document.createElement("p");
                const maxMessage = `Max temperature: ${dataSet[0].maxValue}`;
                const maxTextNode = document.createTextNode(maxMessage);
                maxElement.appendChild(maxTextNode);
                summary.appendChild(maxElement);

                let averageElement = document.createElement("p");
                const averageMessage = `Average temperature: ${dataSet[0].averageValue}`;
                const averageTextNode = document.createTextNode(averageMessage);
                averageElement.appendChild(averageTextNode);
                summary.appendChild(averageElement);
            }
            else {
                // Show alert
                temperatureAlert.classList.remove("hideElement");

                // Hide tempareture data and option
                temperatureData.classList.add("hideElement");
                temperatureOption.classList.add("hideElement");
            }
        }

        function buildTableTemperature(dataSet) {

            // Build table if there are available data
            if (dataSet.length > 0) {

                let table = document.querySelector(".TemperatureTableBody");

                for (let i = 0; i < dataSet.length; i++) {
                    var row = table.querySelector("tr.TemperatureRow").cloneNode(true);

                    let tdList = row.querySelectorAll('td');
                    tdList[0].innerText = dataSet[i].year;
                    tdList[1].innerText = dataSet[i].value;
                    tdList[2].innerText = dataSet[i].unit;
                    tdList[3].innerText = dataSet[i].change;

                    table.appendChild(row);

                    // Remove the template table row
                    if (i == (dataSet.length - 1)) {
                        table.removeChild(table.querySelector("tr.TemperatureRow"));
                    }
                }
            }
        }
        // Build graph
        // Select SVG element
        const svg = d3.select('svg');

        // Determine the size of the SVG element
        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        // Chart margins
        const chartMargins = {
            left: 100,
            right: 25,
            top: 75,
            bottom: 230
        };

        // Update width and height variable to account for the reduction in size caused by margins
        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        // DDL year event listener
        // Build default legend and aggregation
        let chartLegend = "Elements";
        let chartAggregation = "Total";
        let year = "";

        let chartAggregationElement = document.getElementById("chartAggregationElement");

        // Whenever user changes any option, update the graph immediately
        document.querySelector('.row .col-2 #chartLegend').addEventListener('change', legendEvent => {
            chartLegend = legendEvent.target.value;
            updateChartSelection(year, chartLegend, chartAggregation);
        })

        document.querySelector('.row .col-2 #chartAggregation').addEventListener('change', aggregationEvent => {
            chartAggregation = aggregationEvent.target.value;
            updateChartSelection(year, chartLegend, chartAggregation);
        })

        document.querySelector('.row .col-2 #year').addEventListener('change', (yearEvent) => {
            year = yearEvent.target.value;
            updateChartSelection(year, chartLegend, chartAggregation);
        })

        function updateChartSelection(year, chartLegend, chartAggregation) {
            year = year;
            chartLegend = chartLegend;
            chartAggregation = chartAggregation;

            let tips = document.querySelector("#tips");

            if (chartLegend == "Temperature") {
                tips.classList.add("hideElement");

                // Hide year element and chart aggregation if user chooses temperature legend
                yearElement.classList.add("hideElement");
                chartAggregationElement.classList.add("hideElement");

                // Fetch temperature data
                fetch(`/Countries/TemperatureReportData?countryId=${@Model.CountryId}&chartLegend=${chartLegend}`)
                    .then(response => {
                        return response.json();
                    })
                    .then(data => buildGraphTemperature(data))
                    .catch(err => console.log(err.message));
            }
            else {

                tips.classList.remove("hideElement");

                // Show element and chart aggregation if user does not choose temperature legend
                yearElement.classList.remove("hideElement");
                chartAggregationElement.classList.remove("hideElement");

                // Fetch data when year is provided
                if (year.length > 0)
                {
                    fetch(`/Countries/CountryEmissionsReportData?countryId=${@Model.CountryId}&year=${year}&chartLegend=${chartLegend}&chartAggregation=${chartAggregation}`)
                        .then(response => {
                            return response.json();
                        })
                        .then(data => {
                            if (chartLegend == "Items") {
                                buildGraphItem(data)
                            }
                            else {
                                buildGraphElement(data)
                            }
                        })
                        .catch(err => console.log(err.message));
                }
            }
        }

        // dataSet.length is number of items in the dataSet => elements: 8 for countryid=1
        function buildGraphElement(dataSet) {

            //console.log(dataSet)

            // Clear graph and its title
            d3.selectAll('svg > *').remove();

            let valueElementsRangeAverage = "";
            let maxValueElementsAverage = "";

            let valueElementsRangeTotal = "";
            let maxValueElementsTotal = "";

            // Calculate the maximum value to be displayed
            // Average
            if (chartAggregation == "Average") {
                valueElementsRangeAverage = d3.extent(dataSet, (d, e) => d.valueElementAverage);
                maxValueElementsAverage = valueElementsRangeAverage[1];
            }
            // Total
            else {
                valueElementsRangeTotal = d3.extent(dataSet, (d, e) => d.valueElementTotal);
                maxValueElementsTotal = valueElementsRangeTotal[1];
            }

            // Calculate the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // Create a YScale
            let yScale = "";

            // Average
            if (chartAggregation == "Average") {
                yScale = d3.scaleLinear()
                    .domain([0, maxValueElementsAverage])
                    .range([h, 0]);
            }
            // Total
            else {
                yScale = d3.scaleLinear()
                    .domain([0, maxValueElementsTotal])
                    .range([h, 0]);
            }

            // Create XScale
            // Elements
            let array = Array.from(dataSet, (d, e) => d.element);

            let xScale = d3.scaleBand()
                .domain(array)
                .range([0, w])
                .paddingInner(0.1)

            // Create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // Append the barGroups to the chartGroup
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            // Add new bar groups
            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, e) => {
                    // Implement yScale
                    // Implement xScale
                    // Average
                    if (chartAggregation == "Average") {
                        return `translate(${xScale(d.element)}, ${yScale(d.valueElementAverage)})`;
                    }
                    // Total
                    else {
                        return `translate(${xScale(d.element)}, ${yScale(d.valueElementTotal)})`;
                    }
                }); // end transform

            // Add tooltip to show data when hover on bar
            // Reference link: https://perials.github.io/responsive-bar-chart-with-d3/
            const tooltip = d3.select("body")
                .append("div")
                .attr("class", "d3-tooltip")
                .style("position", "absolute")
                .style("z-index", "10")
                .style("visibility", "hidden")
                .style("padding", "15px")
                .style("background", "rgba(0,0,0,0.6)")
                .style("border-radius", "5px")
                .style("color", "#fff")
                .text("Hover to view more data");

            // Append new rectangles
            // Animate
            newBarGroups
                .append('rect')
                .attr('x', 0) // optional line that can be left out since 0 is the default
                // Implement yScale
                .attr('height', 0)
                .attr('y', (d, e) => {
                    // Average
                    if (chartAggregation == "Average") {
                        return h - yScale(d.valueElementAverage);
                    }
                    // Total
                    else {
                        return h - yScale(d.valueElementTotal);
                    }
                })
                // Implement xScale
                .attr('width', xScale.bandwidth())
                .style('fill', 'transparent')
                .style("fill", (d, e) => { return `rgb(246, 190, ${e * 15 + 40})` })
                // Add data information on tooltip when hover on each bar
                .on("mouseover", function (d, e) {
                    // Average
                    if (chartAggregation == "Average") {
                        tooltip
                            .html(`Element: ${e.element} <br>Value: ${e.valueElementAverage}`)
                            .style("visibility", "visible");
                    }
                    // Total
                    else {
                        tooltip
                            .html(`Element: ${e.element} <br>Value: ${e.valueElementTotal}`)
                            .style("visibility", "visible");
                    }

                    d3.select(this)
                        .attr("fill", "#000000");
                })
                .on("mousemove", function () {
                    tooltip
                        .style("top", (event.pageY - 10) + "px")
                        .style("left", (event.pageX + 10) + "px");
                })
                .on("mouseout", function (d, e) {
                    tooltip.html(``).style("visibility", "hidden");
                    d3.select(this).attr("fill", `rgb(0, 121, ${e * 10 + 100})`);
                })
                .transition()
                .duration((d, e) => e * 500) // perform transition over 1 second
                .delay((d, e) => e + 200)
                .attr('height', (d, e) => {
                    // Average
                    if (chartAggregation == "Average") {
                        return h - yScale(d.valueElementAverage);
                    }
                    // Total
                    else {
                        return h - yScale(d.valueElementTotal);
                    }
                })
                // Place 'y' after height to get the bar graph built upward, not downward
                .attr('y', 0);

            // Create Bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, e) => { return xScale.bandwidth() / 2; })
                .attr('y', -10) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar
                .attr('fill', 'black')
                .style('font-size', '1em')
                .text((d, e) => {
                    // Average
                    if (chartAggregation == "Average") {
                        return Math.round(d.valueElementAverage).toLocaleString();
                    }
                    // Total
                    else {
                        return Math.round(d.valueElementTotal).toLocaleString();
                    }
                });

            // Create the axis and add it to the svg
            // Append the y-Axis to the chartGroup
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // Append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
            .attr('transform', `translate(0,${h})`) // pull the xAxis to the bottm
                .classed('axis x', true)
                .call(xAxis);

            // Style and Rotate the labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-30)")
                .attr("dx", "2.5em")
                .attr("dy", "4em")
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "1em"); // set font size

            // Set chart title
            svg.append('text')
                .attr('x', w / 2)
                .attr('y', chartMargins.top / 3)
                .attr('text-anchor', 'middle')
                .style('font-size', '1.5em')
                .text(`${chartAggregation} Country Emissions by ${chartLegend} Graph`);

            svg.append('text')
                .attr('x', -chartMargins.left * 2) // Adjust up down position
                .attr('y', 25) // Decrease the value to move the leftward
                .attr('text-anchor', 'middle')
                .style('font-size', '1.5em')
                .attr('transform', 'rotate(-90)')
                .text(`Emission Value`);
        }

        // Graph for item total
        function buildGraphItem(dataSet) {
            //console.log(dataSet)

            // Clear graph and its title
            d3.selectAll('svg > *').remove();

            // Link reference for create text node
            // https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode
            // Only need dataSet[0] because only have 1 row of
            // total, average, min, max of all emissions in each country

            let valueItemsRangeAverage = "";
            let maxValueItemsAverage = "";

            let valueItemsRangeTotal = "";
            let maxValueItemsTotal = "";

            // Calculate the maximum value to be displayed
            // Average
            if (chartAggregation == "Average") {
                valueItemsRangeAverage = d3.extent(dataSet, (d, i) => d.valueItemAverage);
                maxValueItemsAverage = valueItemsRangeAverage[1];
            }
            // Total
            else {
                valueItemsRangeTotal = d3.extent(dataSet, (d, i) => d.valueItemTotal);
                maxValueItemsTotal = valueItemsRangeTotal[1];
            }

            // Calculate the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // Create a YScale
            // Average
            let yScale = "";
            if (chartAggregation == "Average") {
                yScale = d3.scaleLinear()
                    .domain([0, maxValueItemsAverage])
                    .range([h, 0]);
            }
            // Total
            else {
                yScale = d3.scaleLinear()
                    .domain([0, maxValueItemsTotal])
                    .range([h, 0]);
            }

            // Create XScale
            let itemArray = Array.from(dataSet, (d, i) => d.item);

            let xScale = d3.scaleBand()
                .domain(itemArray)
                .range([0, w])
                .paddingInner(0.1)

            // Create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // Append the barGroups to the chartGroup
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            // Add new bar groups
            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, i) => {

                    // 9 Implement yScale
                    // 10 Implement xScale
                    let y = "";
                    // Average
                    if (chartAggregation == "Average") {
                        y = d.valueItemAverage >= 0 ? h - (d.valueItemAverage / maxValueItemsAverage) * h : h // if value is negative, set y coordinate to h, placing the bar below the chart
                    }
                    // Total
                    else {
                        y = d.valueItemTotal >= 0 ? h - (d.valueItemTotal / maxValueItemsTotal) * h : h
                    }
                    return `translate(${xScale(d.item)}, ${y})`;

                }); // end transform

            // Add tooltip to show data when hover on bar
            // Reference link: https://perials.github.io/responsive-bar-chart-with-d3/
            const tooltip = d3.select("body")
                .append("div")
                .attr("class", "d3-tooltip")
                .style("position", "absolute")
                .style("z-index", "10")
                .style("visibility", "hidden")
                .style("padding", "15px")
                .style("background", "rgba(0,0,0,0.6)")
                .style("border-radius", "5px")
                .style("color", "#fff")
                .text("a simple tooltip");

            // Create Bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, i) => { return xScale.bandwidth() / 2; })
                .attr('y', -10) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar
                .attr('fill', 'black')
                .style('font-size', '0.3em')
                .text((d, i) => {
                    // Average
                    if (chartAggregation == "Average") {
                        return Math.round(d.valueItemAverage).toLocaleString();
                    }
                    // Total
                    else {
                        return Math.round(d.valueItemTotal).toLocaleString();
                    }
                });

            // Append new rectangles
            // Animate
            newBarGroups
                .append('rect')
                .attr('x', 0) // optional line that can be left out since 0 is the default
                .attr('height', (d, i) => {

                    // Average
                    if (chartAggregation == "Average") {
                        return Math.abs((d.valueItemAverage / maxValueItemsAverage) * h); // ensure that height is always positive
                    }
                    // Total
                    else {
                        return Math.abs((d.valueItemTotal / maxValueItemsTotal) * h);
                    }
                })

                // Implement yScale
                // Implement xScale
                .attr('width', xScale.bandwidth())
                .style('fill', 'transparent')
                // Add data information on tooltip when hover on each bar
                .on("mouseover", function (d, i) {
                    // Average
                    if (chartAggregation == "Average") {
                        tooltip
                            .html(`Item: ${i.item} <br>Value: ${i.valueItemAverage}`)
                            .style("visibility", "visible");
                    }
                    // Total
                    else {
                        tooltip
                            .html(`Item: ${i.item} <br>Value: ${i.valueItemTotal}`)
                            .style("visibility", "visible");
                    }

                    d3.select(this)
                        .attr("fill", "#000000");
                })
                .on("mousemove", function () {
                    tooltip
                        .style("top", (event.pageY - 10) + "px")
                        .style("left", (event.pageX + 10) + "px");
                })
                .on("mouseout", function (d, i) {
                    tooltip.html(``).style("visibility", "hidden");
                    d3.select(this).attr("fill", `rgb(0, 121, ${i * 10 + 100})`);
                })
                .transition()
                .duration((d, i) => i * 200) // perform transition over 0.4 second
                .delay((d, i) => i + 200)
                .attr('y', 0)
                .style("fill", (d, i) => { return `rgb(0, 121, ${i * 5 + 100})` });

            // Create the axis and add it to the svg
            // Append the y-Axis to the chartGroup
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // Append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`) // pull the xAxis to the bottm
                .classed('axis x', true)
                .call(xAxis);

            // Style and Rotate the labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-50)")
                .attr("dx", "-7em") // add margin left and right -> go negative to align left
                .attr("dy", "5em") // add margin top and bottom -> increase to go far more bottom
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "0.45em"); // set font size

            svg.append('text')
                .attr('x', w / 2)
                .attr('y', chartMargins.top / 3)
                .attr('text-anchor', 'middle')
                .style('font-size', '1.5em')
                .text(`${chartAggregation} Country Emissions by ${chartLegend} Graph`);

            svg.append('text')
                .attr('x', -chartMargins.left * 2) // Adjust up down position
                .attr('y', 25) // Decrease the value to move the leftward
                .attr('text-anchor', 'middle')
                .style('font-size', '1.5em')
                .attr('transform', 'rotate(-90)')
                .text(`Emission Value`);
        }

        // Get the idea of making a line chart from these links, then fix based on bar chart learned in class
        //https://www.educative.io/answers/how-to-create-a-line-chart-using-d3
        //https://itecnote.com/tecnote/javascript-d3-js-how-to-add-labels-to-scatter-points-on-graph/
        //https://chrissardegna.com/blog/lessons-in-d3-labeling/
        function buildGraphTemperature(dataSet) {

            // Clear graph and its title
            d3.selectAll('svg > *').remove();

            // Calculate the maximum value to be displayed
            let valueTemperatureRange = d3.extent(dataSet, (d, t) => d.value);
            let maxValueTemperature = valueTemperatureRange[1];

            // Create array of data based on year
            let temperatureArray = Array.from(dataSet, (d, t) => d.year);

            // Create XScale
            let xScale = d3.scaleBand()
                .domain(temperatureArray)
                .range([0, w])
                .paddingInner(0.1);

            //Create a YScale
            let yScale = d3.scaleLinear()
                .domain([0, maxValueTemperature])
                .range([h, 0]);

            // Create chartGroup element
            let chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // Create line and generate path data for drawing lines on chart using d3.line()
            let lineGenerator = d3.line()
                .x(d => xScale(d.year)) // x coordinate of line
                .y(d => yScale(d.value)); // y coordinate of line

            // Append a path element to draw the line
            chartGroup.append('path')
                .datum(dataSet)
                .attr("class", "line")
                .attr('fill', 'none')
                .attr('stroke', 'red')
                .attr('stroke-width', 2)
                .attr('d', lineGenerator);

            // Create the y-axis and add it to the svg
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // Append the x-axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`) // pull the x-axis to the bottom
                .classed('axis x', true)
                .call(xAxis);

            // Style x-axis labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-50)")
                .attr("dx", "-7em")
                .attr("dy", "5em")
                .style("text-anchor", "end")
                .style("font-size", "1em");

            // Add dots at data points
            chartGroup.selectAll(".dot")
                .data(dataSet)
                .enter()
                .append("circle")
                .attr("class", "dot")
                .attr("cx", d => xScale(d.year))
                .attr("cy", d => yScale(d.value))
                .attr("r", 3) // Add radius of dot
                .style("fill", "red"); // Set color of dot

            // Instead of scatter-label, tried dot-label because was using .dot above and it worked
            chartGroup.selectAll(".dot-label")
                .data(dataSet)
                .enter()
                .append('text')
                .attr("class", "dot-label")
                .attr("x", d => xScale(d.year))
                .attr("y", d => yScale(d.value) - 10) // Adjust the y position to place text above the dot
                .attr("text-anchor", "middle")
                .attr('fill', 'black')
                .style('font-size', '0.45em')
                .text(d => d.value.toLocaleString()); // Display the value as text

            // Add chart title
            svg.append('text')
                .attr('x', w / 2)
                .attr('y', chartMargins.top / 3)
                .attr('text-anchor', 'middle')
                .style('font-size', '1.5em')
                .text(`${chartLegend} Value Graph`);

            svg.append('text')
                .attr('x', -chartMargins.left * 2) // Adjust for up down positioning
                .attr('y', 50) // Decrease the value to move the title leftward
                .attr('text-anchor', 'middle')
                .style('font-size', '1em')
                .attr('transform', 'rotate(-90)')
                .text(`${chartLegend} Value (Celsius degree)`);

        }
    </script>
}
