@*@model Assig1.Models.City*@
@model Assig1.ViewModels.CitiesViewModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>
<a asp-action="Index" asp-route-id="@Model.RegionId" asp-route-countryId="@Model.TheCityDetail?.TheCity?.CountryId" asp-route-searchText="@Model.SearchText" class="btn btn-outline-primary">Go back</a>
<div>
    @if (Model.TheCityDetail != null)
    {
        <p>City name: @Model.TheCityDetail?.TheCity?.CityName</p>
    }
    else
    {
        <p>No name</p>
    }

    @if (Model.TheCityDetail != null)
    {
        <p>Region Name: @Model.TheCityDetail?.TheRegion?.RegionName</p>
    }
    else
    {
        <p>No region</p>
    }
    @if (Model.TheCityDetail != null)
    {
        <p>Country Name: @Model.TheCityDetail?.TheCountry?.CountryName</p>
        <p>Image: </p>
        @*<img src="@Model.TheCityDetail.TheCountry.ImageUrl" class="card-img-top" alt="...">*@
    }
    else
    {
        <p>No country</p>
    }
    @*@if(Model.TheCityDetail != null)
        {
                    <p>Country Name: @Model.TheCityDetail.TheCountry.CountryName</p>
        }*@


</div>
<div class="row mb-3" id="dataDisplay">
    <div class="col-2" id="chartLegend">
        <select asp-for="@Model.ChartLegend" class="form-control" id="chartLegend">
            @*<option value="">Select Data</option>*@
            <option value="Year">Year</option>
            <option value="Station">Station Type</option>
        </select>
    </div>
    <div class="col-2" id="yearElement">
        <select asp-for="@Model.Year" asp-items="@Model.YearList" class="form-control" id="year">
            <option value="">Select year</option>
        </select>
    </div>
    <div class="col-2 hideElement" id="stationElement">
        <select asp-for="@Model.StationType" asp-items="@Model.StationTypeList" class="form-control" id="station">
            <option value="">Select station type</option>
        </select>
    </div>
</div>
<div>
    <svg width="100%" height="600px" class="border border-primary rounded p-2"></svg>
</div>

<div>
    <table>
        <thead>
            <tr>
                <th>cityId</th>
                <th>year</th>
                <th>annualMean</th>
                <th>annualMeanPm10</th>
                <th>annualMeanPm25</th>
                <th>annualMeanUgm3</th>
                <th>temporalCoverage1</th>
                <th>temporalCoverage2</th>
                <th>reference</th>
                <th>dbYear</th>
                <th>status</th>
                <th>stationType</th>
                <th>number</th>
            </tr>
        </thead>
        <tbody class="AirQualityInfo">
            <tr class="rowData">
                <td>cityId test</td>
                <td>year test</td>
                <td>annualMean test</td>
                <td>annualMeanPm10 test</td>
                <td>annualMeanPm25 test</td>
                <td>annualMeanUgm3 test</td>
                <td>temporalCoverage1 test</td>
                <td>temporalCoverage2 test</td>
                <td>reference test</td>
                <td>dbYear test</td>
                <td>status test</td>
                <td>stationType test</td>
                <td>number test</td>
            </tr>
        </tbody>
    </table>
</div>
@section scripts{
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}`)
            .then(response => {
                console.log("response status: " + response.status);
                console.log("response text: " + response.statusText);
                return response.json();
            })
            .then(data => buildAirQualityTable(data))
            .catch(err => console.log(err.message));

        function buildAirQualityTable(dataSet) {
            console.log("This is air quality table")
            console.log(dataSet)

            var table = document.querySelector(".AirQualityInfo")

            for (let i = 0; i < dataSet.length; i++) {
                var row = table.querySelector("tr.rowData").cloneNode(true);

                let tdList = row.querySelectorAll('td');
                tdList[0].innerText = dataSet[i].cityId;
                tdList[1].innerText = dataSet[i].year;
                tdList[2].innerText = dataSet[i].annualMean;
                tdList[3].innerText = dataSet[i].annualMeanPm10;
                tdList[4].innerText = dataSet[i].annualMeanPm25;
                tdList[5].innerText = dataSet[i].annualMeanUgm3;
                tdList[6].innerText = dataSet[i].temporalCoverage1;
                tdList[7].innerText = dataSet[i].temporalCoverage2;
                tdList[8].innerText = dataSet[i].reference;
                tdList[9].innerText = dataSet[i].dbYear;
                tdList[10].innerText = dataSet[i].status;
                tdList[11].innerText = dataSet[i].stationType;
                tdList[12].innerText = dataSet[i].number;

                table.appendChild(row);

                if (i == (dataSet.length - 1)) {
                    table.removeChild(table.querySelector("tr.rowData"))
                }
            }
        }

        // 1 Select SVG element
        const svg = d3.select('svg');

        // 2 Determine the size of the SVG element
        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        console.log("Width: " + w);
        console.log("Height: " + h);

        // 12 Chart margins
        const chartMargins = {
            left: 40,
            right: 25,
            top: 25,
            bottom: 150
        };

        // 12 Update width and height variable to account for the reduction in size caused by margins
        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        // DDL year event listener
        // Build default legend and aggregation
        //let chartLegend = "Elements";
        //let chartAggregation = "Total";
        //let chartLegend = "";
        //let temperatureLegend = "";


        var chart = "Year";
        let year = "";
        let station = "";

        var yearElement = document.getElementById("yearElement");
        var stationElement = document.getElementById("stationElement");

        //var chartAggregationElement = document.getElementById("chartAggregationElement");

        document.querySelector('.row .col-2 #chartLegend').addEventListener('change', legendEvent => {
            chart = legendEvent.target.value;
            console.log("Legend: " + chart);
            updateChartSelection(chart, year, station);

        })

        document.querySelector('.row .col-2 #year').addEventListener('change', yearEvent => {
            year = yearEvent.target.value;
            console.log("Year: " + year);
            updateChartSelection(chart, year, station);

        })

        document.querySelector('.row .col-2 #station').addEventListener('change', stationEvent => {
            station = stationEvent.target.value;
            console.log("station: " + station);
            updateChartSelection(chart, year, station);

        })

        function updateChartSelection(chart, year, station) {
            chart = chart;
            year = year;
            station = station;

            console.log("UPDATED chart: " + chart);
            console.log("UPDATED CHART year: " + year);
            console.log("UPDATED CHART station: " + station);

            if (chart == "Station") {
                console.log("In station")
                yearElement.classList.add("hideElement")
                stationElement.classList.remove("hideElement")

                if (station != "") {
                    fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}&stationType=${station}`)
                        .then(response => {
                            console.log("response status: " + response.status);
                            console.log("response text: " + response.statusText);
                            return response.json();
                        })
                        .then(data => buildAirQualityStation(data))
                        .catch(err => console.log(err.message));
                }

            }

            else {
                console.log("In year")
                stationElement.classList.add("hideElement")
                yearElement.classList.remove("hideElement")

                if (year > 0) {

                    fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}&year=${year}`)
                        .then(response => {
                            console.log("response status: " + response.status);
                            console.log("response text: " + response.statusText);
                            return response.json();
                        })
                        .then(data => buildAirQualityYear(data))
                        .catch(err => console.log(err.message));
                }
            }
        }

        function buildAirQualityStation(dataSet) {
            console.log(dataSet);

            // Clear graph
            d3.selectAll('svg > g > *').remove();

            // 4 Calculate the maximum value to be displayed
            let annualMeanRange = d3.extent(dataSet, (d, a) => d.annualMean);
            let maxAnnualMean = annualMeanRange[1];

            console.log("Max totalElements: " + annualMeanRange);

            // 4 Calculate the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // 8 Create a YScale
            let yScale = d3.scaleLinear()
                .domain([0, maxAnnualMean])
                .range([h, 0]);

            // 10 Create XScale
            let annualMeanArray = Array.from(dataSet, (d, a) => d.year);
            console.log("array: " + annualMeanArray)

            let xScale = d3.scaleBand()
                .domain(annualMeanArray)
                .range([0, w])
                .paddingInner(0.1)

            // example of xScale test:
            console.log("xscale: " + xScale(1))

            // 12.4 Create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // 5 Select all 'g' elements and bind the dataSet
            //let barGroups = svg
            //    .selectAll('g')
            //    .data(dataSet);
            // 12.4 Append the barGroups to the chartGroup
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            // 6 Add new bar groups
            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, e) => {
                    // 9 Implement yScale
                    //return `translate(${e * barWidth}, ${yScale(d.totalValue)})`;

                    // 10 Implement xScale
                    return `translate(${xScale(d.year)}, ${yScale(d.annualMean)})`;
                    //return `translate(${e * barWidth}, ${h - (d.totalValue / maxTotalElements) * h})`;
                    // returns transform="translate(x,y)"
                }); // end transform

            // 7 Append new rectangles
            // 11 animate
            newBarGroups
                .append('rect')
                .attr('x', 0) // optional line that can be left out since 0 is the default
                //.attr('height', (d, e) => { return d.totalValue / maxTotalElements * h; })
                // 9 Implement yScale
                .attr('height', 0)
                .attr('y', (d, a) => { return h - yScale(d.annualMean); })
                //.attr('width', barWidth - barMargin)
                //10 Implement xScale
                .attr('width', xScale.bandwidth())
                .style('fill', 'transparent')
                .transition().duration((d, a) => a * 500) // perform transition over 1 second
                .delay((d, a) => a + 200)
                .attr('y', 0)
                .attr('height', (d, a) => { return h - yScale(d.annualMean); })
                .style("fill", (d, a) => { return `rgb(20, 20, ${a * 15 + 80})` });
            //.attr('fill', 'blue')

            // 14 Create Bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, a) => { return xScale.bandwidth() / 2; })
                .attr('y', -10) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar
                .attr('fill', 'black')
                .style('font-size', '1em')
                .text((d, a) => d.annualMean.toLocaleString());

            // 11 Create the axis and add it to the svg

            //let yAxis = d3.axisLeft(yScale); // declare the axis generator
            //svg.append('g')
            //    .classed('axis y', true)
            //    .call(yAxis);
            // 12.5 Append the y-Axis to the chartGroup
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // 13 Append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`) // pull the xAxis to the bottm
                .classed('axis x', true)
                .call(xAxis);

            // Style and Rotate the labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-70)")
                .attr("dx", "-0.8em")
                .attr("dy", "0.25em")
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "0.9em"); // set font size
        }

        function buildAirQualityYear(dataSet) {
            console.log(dataSet);

            // Clear graph
            d3.selectAll('svg > g > *').remove();

            // 4 Calculate the maximum value to be displayed
            let annualMeanRange = d3.extent(dataSet, (d, a) => d.annualMean);
            let maxAnnualMean = annualMeanRange[1];

            console.log("Max totalElements: " + annualMeanRange);

            // 4 Calculate the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // 8 Create a YScale
            let yScale = d3.scaleLinear()
                .domain([0, maxAnnualMean])
                .range([h, 0]);

            // 10 Create XScale
            let annualMeanArray = Array.from(dataSet, (d, a) => d.stationType);
            console.log("array: " + annualMeanArray)

            let xScale = d3.scaleBand()
                .domain(annualMeanArray)
                .range([0, w])
                .paddingInner(0.1)

            // example of xScale test:
            console.log("xscale: " + xScale(1))

            // 12.4 Create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // 5 Select all 'g' elements and bind the dataSet
            //let barGroups = svg
            //    .selectAll('g')
            //    .data(dataSet);
            // 12.4 Append the barGroups to the chartGroup
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            // 6 Add new bar groups
            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, e) => {
                    // 9 Implement yScale
                    //return `translate(${e * barWidth}, ${yScale(d.totalValue)})`;

                    // 10 Implement xScale
                    return `translate(${xScale(d.stationType)}, ${yScale(d.annualMean)})`;
                    //return `translate(${e * barWidth}, ${h - (d.totalValue / maxTotalElements) * h})`;
                    // returns transform="translate(x,y)"
                }); // end transform

            // 7 Append new rectangles
            // 11 animate
            newBarGroups
                .append('rect')
                .attr('x', 0) // optional line that can be left out since 0 is the default
                //.attr('height', (d, e) => { return d.totalValue / maxTotalElements * h; })
                // 9 Implement yScale
                .attr('height', 0)
                .attr('y', (d, a) => { return h - yScale(d.annualMean); })
                //.attr('width', barWidth - barMargin)
                //10 Implement xScale
                .attr('width', xScale.bandwidth())
                .style('fill', 'transparent')
                .transition().duration((d, a) => a * 500) // perform transition over 1 second
                .delay((d, a) => a + 200)
                .attr('y', 0)
                .attr('height', (d, a) => { return h - yScale(d.annualMean); })
                .style("fill", (d, a) => { return `rgb(20, 20, ${a * 15 + 80})` });
            //.attr('fill', 'blue')

            // 14 Create Bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, a) => { return xScale.bandwidth() / 2; })
                .attr('y', -10) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar
                .attr('fill', 'black')
                .style('font-size', '1em')
                .text((d, a) => d.annualMean.toLocaleString());

            // 11 Create the axis and add it to the svg

            //let yAxis = d3.axisLeft(yScale); // declare the axis generator
            //svg.append('g')
            //    .classed('axis y', true)
            //    .call(yAxis);
            // 12.5 Append the y-Axis to the chartGroup
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // 13 Append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`) // pull the xAxis to the bottm
                .classed('axis x', true)
                .call(xAxis);

            // Style and Rotate the labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-70)")
                .attr("dx", "-0.8em")
                .attr("dy", "0.25em")
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "0.9em"); // set font size
        }

        
    </script>
}
@*<div>
        <h4>City</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.CityName)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.CityName)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Country)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Country.CountryId)
            </dd>
        </dl>
    </div>
    <div>
        <a asp-action="Edit" asp-route-id="@Model?.CityId">Edit</a> |
        <a asp-action="Index">Back to List</a>
    </div>*@
