@model Assig1.ViewModels.CitiesViewModel

@{
    ViewData["Title"] = "Details";
}
<div class="text-center">
    @if (Model.TheCityDetail != null)
    {
        <h1>@Model.TheCityDetail?.TheCity?.CityName's Air Quality Data</h1>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            City name not available.
        </div>
    }
    @if (Model.TheCityDetail != null)
    {
        <h3>@Model.TheCityDetail?.TheCountry?.CountryName</h3>
        @*<img src="@Model.TheCityDetail.TheCountry.ImageUrl" class="card-img-top" alt="...">*@
    }
    else
    {
        <h3>Country: Not available</h3>
    }
    @if (Model.TheCityDetail != null)
    {
        <h5>@Model.TheCityDetail?.TheRegion?.RegionName</h5>
    }
    else
    {
        <h5>Region: Not available</h5>
    }
</div>

<div class="row justify-content-center" id="AirAlert" align="center" role="alert">
    @*<div class="alert alert-danger" role="alert">
            This is an alert
        </div>*@
</div>
<a asp-action="Index" asp-route-regionId="@Model.RegionId" asp-route-countryId="@Model.TheCityDetail?.TheCity?.CountryId" asp-route-searchText="@Model.SearchText" class="btn btn-success">Go back</a>

<div id="AirData">
    <div class="row mb-3 mt-3" id="dataDisplay">
        <div class="col-2" id="chartLegend">
            <select asp-for="@Model.ChartLegend" class="form-control" id="chartLegend">
                <option value="Year">Year</option>
                <option value="Station">Station Type</option>
            </select>
        </div>
        <div class="col-2" id="yearElement">
            <select asp-for="@Model.Year" asp-items="@Model.YearList" class="form-control" id="year">
                <option value="">Select year</option>
            </select>
        </div>
        <div class="col-2 hideElement" id="stationElement">
            <select asp-for="@Model.StationType" asp-items="@Model.StationTypeList" class="form-control" id="station">
                <option value="">Select station type</option>
            </select>
        </div>
    </div>
    <div>
        <svg width="100%" height="600px" class="border border-primary rounded p-2"></svg>
    </div>
    <div class="alert alert-info mt-3" role="alert">
        ⚠︎ Choose either Year or Station Type and continue choosing a specific Year or Station Type.
    </div>
    <div class="accordion mt-3" id="accordionExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    View air quality data summary of the country
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body" id="AirSummary">

                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    View all air quality data
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div id="ItemElementInfo">
                        <table class="table table-info">
                            <thead>
                                <tr>
                                    <th>Year</th>
                                    <th>Annual Mean</th>
                                    <th>Annual Mean Pm10</th>
                                    <th>Annual Mean Pm25</th>
                                    <th>Annual Mean Ugm3</th>
                                    <th>Temporal Coverage 1</th>
                                    <th>Temporal Coverage 2</th>
                                    <th>Station Type</th>
                                    <th>Number of Stations</th>
                                    <th>Database Year</th>
                                    <th>Status</th>
                                    <th>Reference</th>
                                </tr>
                            </thead>
                            <tbody class="AirQualityInfo">
                                <tr class="rowData">
                                    <td>year test</td>
                                    <td>annualMean test</td>
                                    <td>annualMeanPm10 test</td>
                                    <td>annualMeanPm25 test</td>
                                    <td>annualMeanUgm3 test</td>
                                    <td>temporalCoverage1 test</td>
                                    <td>temporalCoverage2 test</td>
                                    <td>stationType test</td>
                                    <td>number test</td>
                                    <td>dbYear test</td>
                                    <td>status test</td>
                                    <td>reference test</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}`)
            .then(response => {
                console.log("response status: " + response.status);
                console.log("response text: " + response.statusText);
                return response.json();
            })
            .then(data => buildAirQualityTable(data))
            .catch(err => console.log(err.message));

        fetch(`/Cities/AirSummaryData?countryId=${@Model.CountryId}&cityId=${@Model.CityId}`)
            .then(response => {
                console.log("response status: " + response.status);
                console.log("response text: " + response.statusText);
                return response.json();
            })
            .then(data => buildAirSummary(data))
            .catch(err => console.log(err.message));

        function buildAirSummary(dataSet) {
            console.log("IN build air summary");
            console.log(dataSet);
            var summary = document.querySelector("#AirSummary");

            // Only need dataSet[0] because only have 1 row of
            // total, average, min, max of all emissions in each country
            //var totalElement = document.createElement("p");
            //var totalMessage = `Total annual mean of air quality data: ${dataSet[0].totalValue}`;
            //var totalTextNode = document.createTextNode(totalMessage);
            //totalElement.appendChild(totalTextNode);
            //summary.appendChild(totalElement);

            var averageElement = document.createElement("p");
            var averageMessage = `Average annual mean of air quality data: ${dataSet[0].averageValue}`;
            var averageTextNode = document.createTextNode(averageMessage);
            averageElement.appendChild(averageTextNode);
            summary.appendChild(averageElement);

            var minElement = document.createElement("p");
            var minMessage = `Min annual mean of air quality data: ${dataSet[0].minValue}`;
            var minTextNode = document.createTextNode(minMessage);
            minElement.appendChild(minTextNode);
            summary.appendChild(minElement);

            var maxElement = document.createElement("p");
            var maxMessage = `Max annual mean of air quality data: ${dataSet[0].maxValue}`;
            var maxTextNode = document.createTextNode(maxMessage);
            maxElement.appendChild(maxTextNode);
            summary.appendChild(maxElement);
        }
        function buildAirQualityTable(dataSet) {
            console.log("This is air quality table")
            console.log(dataSet)

            var table = document.querySelector(".AirQualityInfo")
            if (dataSet.length > 0) {
                for (let i = 0; i < dataSet.length; i++) {
                    var row = table.querySelector("tr.rowData").cloneNode(true);

                    let tdList = row.querySelectorAll('td');
                    tdList[0].innerText = dataSet[i].year;
                    tdList[1].innerText = dataSet[i].annualMean;
                    tdList[2].innerText = dataSet[i].annualMeanPm10;
                    tdList[3].innerText = dataSet[i].annualMeanPm25;
                    tdList[4].innerText = dataSet[i].annualMeanUgm3;
                    tdList[5].innerText = dataSet[i].temporalCoverage1;
                    tdList[6].innerText = dataSet[i].temporalCoverage2;
                    tdList[7].innerText = dataSet[i].stationType;
                    tdList[8].innerText = dataSet[i].number;
                    tdList[9].innerText = dataSet[i].dbYear;
                    tdList[10].innerText = dataSet[i].status;
                    tdList[11].innerText = dataSet[i].reference;

                    table.appendChild(row);

                    if (i == (dataSet.length - 1)) {
                        table.removeChild(table.querySelector("tr.rowData"))
                    }
                }
            }
            else {
                console.log("In else");
                var alertContainer = document.querySelector("#AirAlert");

                var alertElement = document.createElement("div");
                alertElement.className = "alert alert-warning";
                alertElement.setAttribute("role", "alert");

                var message = "There is no emission data in this country.";
                var textNode = document.createTextNode(message);
                alertElement.appendChild(textNode);
                alertContainer.appendChild(alertElement);

                var airData = document.getElementById("AirData");
                airData.classList.add("hideElement");
            }
        }

        // 1 Select SVG element
        const svg = d3.select('svg');

        // 2 Determine the size of the SVG element
        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        console.log("Width: " + w);
        console.log("Height: " + h);

        // 12 Chart margins
        const chartMargins = {
            left: 40,
            right: 25,
            top: 25,
            bottom: 150
        };

        // 12 Update width and height variable to account for the reduction in size caused by margins
        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        // DDL year event listener
        // Build default legend and aggregation

        var chart = "Year";
        let year = "";
        let station = "";

        var yearElement = document.getElementById("yearElement");
        var stationElement = document.getElementById("stationElement");

        document.querySelector('.row .col-2 #chartLegend').addEventListener('change', legendEvent => {
            chart = legendEvent.target.value;
            console.log("Legend: " + chart);
            updateChartSelection(chart, year, station);

        })

        document.querySelector('.row .col-2 #year').addEventListener('change', yearEvent => {
            year = yearEvent.target.value;
            console.log("Year: " + year);
            updateChartSelection(chart, year, station);

        })

        document.querySelector('.row .col-2 #station').addEventListener('change', stationEvent => {
            station = stationEvent.target.value;
            console.log("station: " + station);
            updateChartSelection(chart, year, station);

        })

        function updateChartSelection(chart, year, station) {
            chart = chart;
            year = year;
            station = station;

            console.log("UPDATED chart: " + chart);
            console.log("UPDATED CHART year: " + year);
            console.log("UPDATED CHART station: " + station);

            if (chart == "Station") {
                console.log("In station")
                yearElement.classList.add("hideElement")
                stationElement.classList.remove("hideElement")

                if (station != "") {
                    fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}&stationType=${station}`)
                        .then(response => {
                            console.log("response status: " + response.status);
                            console.log("response text: " + response.statusText);
                            return response.json();
                        })
                        .then(data => buildAirQualityStation(data))
                        .catch(err => console.log(err.message));
                }

            }

            else {
                console.log("In year")
                stationElement.classList.add("hideElement")
                yearElement.classList.remove("hideElement")

                if (year > 0) {

                    fetch(`/Cities/AirQualityReportData?cityId=${@Model.CityId}&year=${year}`)
                        .then(response => {
                            console.log("response status: " + response.status);
                            console.log("response text: " + response.statusText);
                            return response.json();
                        })
                        .then(data => buildAirQualityYear(data))
                        .catch(err => console.log(err.message));
                }
            }
        }

        function buildAirQualityStation(dataSet) {
            console.log(dataSet);

            // Clear graph
            d3.selectAll('svg > g > *').remove();

            // 4 Calculate the maximum value to be displayed
            let annualMeanRange = d3.extent(dataSet, (d, a) => d.annualMean);
            let maxAnnualMean = annualMeanRange[1];

            console.log("Max totalElements: " + annualMeanRange);

            // 4 Calculate the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // 8 Create a YScale
            let yScale = d3.scaleLinear()
                .domain([0, maxAnnualMean])
                .range([h, 0]);

            // 10 Create XScale
            let annualMeanArray = Array.from(dataSet, (d, a) => d.year);
            console.log("array: " + annualMeanArray)

            let xScale = d3.scaleBand()
                .domain(annualMeanArray)
                .range([0, w])
                .paddingInner(0.1)

            // example of xScale test:
            console.log("xscale: " + xScale(1))

            // 12.4 Create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // 5 Select all 'g' elements and bind the dataSet
            //let barGroups = svg
            //    .selectAll('g')
            //    .data(dataSet);
            // 12.4 Append the barGroups to the chartGroup
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            // 6 Add new bar groups
            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, e) => {
                    // 9 Implement yScale
                    // 10 Implement xScale
                    return `translate(${xScale(d.year)}, ${yScale(d.annualMean)})`;
                }); // end transform

            // 7 Append new rectangles
            // 11 animate
            newBarGroups
                .append('rect')
                .attr('x', 0) // optional line that can be left out since 0 is the default
                //.attr('height', (d, e) => { return d.totalValue / maxTotalElements * h; })
                // 9 Implement yScale
                .attr('height', 0)
                .attr('y', (d, a) => { return h - yScale(d.annualMean); })
                //.attr('width', barWidth - barMargin)
                //10 Implement xScale
                .attr('width', xScale.bandwidth())
                .style('fill', 'transparent')
                .transition().duration((d, a) => a * 500) // perform transition over 1 second
                .delay((d, a) => a + 200)
                .attr('y', 0)
                .attr('height', (d, a) => { return h - yScale(d.annualMean); })
                .style("fill", (d, a) => { return `rgb(246, 190, ${a * 15 + 80})` });

            // 14 Create Bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, a) => { return xScale.bandwidth() / 2; })
                .attr('y', -10) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar
                .attr('fill', 'black')
                .style('font-size', '1em')
                .text((d, a) => d.annualMean.toLocaleString());

            // 11 Create the axis and add it to the svg
            // 12.5 Append the y-Axis to the chartGroup
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // 13 Append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`) // pull the xAxis to the bottm
                .classed('axis x', true)
                .call(xAxis);

            // Style and Rotate the labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(0)")
                .attr("dx", "1em")
                .attr("dy", "1.5em")
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "2em"); // set font size
        }

        function buildAirQualityYear(dataSet) {
            console.log(dataSet);

            // Clear graph
            d3.selectAll('svg > g > *').remove();

            // 4 Calculate the maximum value to be displayed
            let annualMeanRange = d3.extent(dataSet, (d, a) => d.annualMean);
            let maxAnnualMean = annualMeanRange[1];

            console.log("Max totalElements: " + annualMeanRange);

            // 4 Calculate the bar dimensions
            const barMargin = 10;
            const barWidth = w / dataSet.length;

            // 8 Create a YScale
            let yScale = d3.scaleLinear()
                .domain([0, maxAnnualMean])
                .range([h, 0]);

            // 10 Create XScale
            let annualMeanArray = Array.from(dataSet, (d, a) => d.stationType);
            console.log("array: " + annualMeanArray)

            let xScale = d3.scaleBand()
                .domain(annualMeanArray)
                .range([0, w])
                .paddingInner(0.1)

            // example of xScale test:
            console.log("xscale: " + xScale(1))

            // 12.4 Create chartGroup element
            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            // 5 Select all 'g' elements and bind the dataSet
            //let barGroups = svg
            //    .selectAll('g')
            //    .data(dataSet);
            // 12.4 Append the barGroups to the chartGroup
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            // 6 Add new bar groups
            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, e) => {
                    // 9 Implement yScale
                    // 10 Implement xScale
                    return `translate(${xScale(d.stationType)}, ${yScale(d.annualMean)})`;
                }); // end transform

            // 7 Append new rectangles
            // 11 animate
            newBarGroups
                .append('rect')
                .attr('x', 0) // optional line that can be left out since 0 is the default
                // 9 Implement yScale
                .attr('height', 0)
                .attr('y', (d, a) => { return h - yScale(d.annualMean); })
                //.attr('width', barWidth - barMargin)
                //10 Implement xScale
                .attr('width', xScale.bandwidth())
                .style('fill', 'transparent')
                .transition().duration((d, a) => a * 500) // perform transition over 1 second
                .delay((d, a) => a + 200)
                .attr('y', 0)
                .attr('height', (d, a) => { return h - yScale(d.annualMean); })
                .style("fill", (d, a) => { return `rgb(20, 20, ${a * 15 + 80})` });

            // 14 Create Bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, a) => { return xScale.bandwidth() / 2; })
                .attr('y', -10) // change whether bar text will appear inside or outside bar, 20 makes it stay inside bar
                .style('font-size', '1em')
                .text((d, a) => d.annualMean.toLocaleString());

            // 11 Create the axis and add it to the svg
            // 12.5 Append the y-Axis to the chartGroup
            let yAxis = d3.axisLeft(yScale); // declare the axis generator
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            // 13 Append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0,${h})`) // pull the xAxis to the bottm
                .classed('axis x', true)
                .call(xAxis);

            // Style and Rotate the labels
            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(0)")
                .attr("dx", "2em")
                .attr("dy", "1.5em")
                .style("text-anchor", "end") // pull labels to bottom
                .style("font-size", "1.5em"); // set font size
        }


    </script>
}
